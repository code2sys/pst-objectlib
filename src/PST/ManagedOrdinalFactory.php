<?php
/**
 * Created by PhpStorm.
 * User: jonathan
 * Date: 6/7/18
 * Time: 3:46 PM
 *
 * This is from JLB-AV.
 *
 */



namespace PST;

use \PDO;
use \PDOException;

abstract class ManagedOrdinalFactory extends AbstractFactory
{
    protected $ordinalMatchColumns;
    public $ordinal_column = "Ordinal";

    public function hasOrdinal() {
        return in_array($this->ordinal_column, $this->_datacols);
    }

    public function fetchOrdered($kvpArray = array(), $data_array = false, $limit = 0)
    {
        $query = $this->_getQuery();
        return $this->_subFetch($query, $kvpArray, $data_array, array(), $limit, " ORDER BY " . $this->ordinal_column);
    }

    public function update($id, $kvpArray, $trigger_alert = true)
    {
        $old_ordinal = $new_ordinal = 0;

        if (array_key_exists($this->ordinal_column, $kvpArray)) {
            $obj = $this->get($id);
            if (!is_null($obj)) {
                $old_ordinal = $obj->get($this->ordinal_column);
                $new_ordinal = $kvpArray[$this->ordinal_column];
            }

        }

        $res = parent::update($id, $kvpArray, $trigger_alert); // TODO: Change the autogenerated stub

        if ($old_ordinal != $new_ordinal) {
            $this->fixOrdinal($id, $new_ordinal, $old_ordinal, $this->extractOrdinalMatch($obj));
        }

        return $res;
    }

    protected function extractOrdinalMatch($obj) {
        $kvpArray = array();
        foreach ($this->ordinalMatchColumns as $k) {
            $kvpArray[$k] = $obj->get($k);
        }
        return $kvpArray;
    }

    public function remove($id)
    {
        $obj = $this->get($id);
        parent::remove($id);
        if (!is_null($obj)) {
            // We need to renumber these...
            $this->renumberOrdinals($this->extractOrdinalMatch($obj));
        }
    }


    public function fixOrdinal($id, $new_ordinal, $old_ordinal, $kvpArray) {
        if ($new_ordinal == $old_ordinal) {
            return; // done; nothing to do...
        }

        if ($new_ordinal < $old_ordinal) {
            $adjustment = " + 1 where " . $this->ordinal_column . " >= ? and " . $this->ordinal_column . " < ? "; // Move them up!
        } else {
            $adjustment = " - 1 Where " . $this->ordinal_column . " <= ? and " . $this->ordinal_column . " > ? ";
        }

        $query = "Update " . $this->table . " set " . $this->ordinal_column . " = " . $this->ordinal_column . " $adjustment and " . $this->table_id . " != ? ";
        $query_values = array($new_ordinal, $old_ordinal, $id);
        $this->expandKVPToQuery($kvpArray, true, $query, $query_values);
        $this->queryWithValues($query, $query_values);

        $this->renumberOrdinals($kvpArray);
    }

    public function fetchOrdinalOptions($kvpArray, $name_field = "Name") {
        $options = array(
            array("value" => 1, "name" => "First")
        );

        $matches = $this->fetch($kvpArray, true);
        $ordinal_column = $this->ordinal_column;

        usort($matches, function($a, $b) use ($ordinal_column) {
            $a_ordinal = intVal($a[$ordinal_column]);
            $b_ordinal = intVal($b[$ordinal_column]);

            return $a_ordinal == $b_ordinal ? 0 : ($a_ordinal < $b_ordinal ? -1 : 1);
        });

        $ordinal = 0;
        foreach ($matches as $match)
        {
            $ordinal = 1 + $match[$this->ordinal_column];

            $options[] = array(
                "value" => $match[$this->ordinal_column],
                "name" => $match[$this->ordinal_column] . " - " . $match[$name_field]
            );
        }

        $options[] = array(
            "value" => $ordinal,
            "name" => "Last"
        );

        return $options;
    }

    public function addNextOrdinal($kvpArray, $match_array = array()) {

        $obj = $this->add($kvpArray);

        if (!$this->hasOrdinal()) {
            error_log("Called to addNextOrdinal on " . $this->IdentifyFactory() . " but, well, no Ordinal field in _datacols.");
            return $obj; // just bail out here rather than doing something very wrong.
        }

        $query = "Select IfNull(max(Ordinal), 0) from " . $this->table . " where " . $this->table_id . " < ?";
        $query_values = array($obj->id());

        foreach ($match_array as $k => $v) {
            $query .= " AND $k = ? ";
            $query_values[] = $v;
        }

        $stmt = $this->dbh->prepare($query);
        for ($i = 0; $i < count($query_values); $i++) {
            $stmt->bindValue(1 + $i, $query_values[$i]);
        }
        $stmt->execute();
        $ord = $stmt->fetch(PDO::FETCH_COLUMN);

        $this->update($obj->id(), array($this->ordinal_column => 1 + $ord));

        return $this->get($obj->id());
    }


    public function renumberOrdinals($kvpArray) {
        $query = "SET @i = 0; UPDATE " . $this->table . " SET " . $this->ordinal_column . " = (@i := @i + 1) ";
        $query_values = array();
        $this->expandKVPToQuery($kvpArray, false, $query, $query_values);
        $query .= " ORDER BY  " . $this->ordinal_column;
        $this->queryWithValues($query, $query_values);
    }

}